# =============================================================================
# @file    Makefile
# @brief   Makefile for some steps in creating new releases on GitHub
# @date    2023-06-12
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/boffo
# =============================================================================

.ONESHELL:                              # Run all commands in the same shell.
.SHELLFLAGS += -e                       # Exit at the first error.

# This Makefile uses syntax that needs at least GNU Make version 3.82.
# The following test is based on the approach posted by Eldar Abusalimov to
# Stack Overflow in 2012 at https://stackoverflow.com/a/12231321/743730

ifeq ($(filter undefine,$(value .FEATURES)),)
$(error Unsupported version of Make. \
    This Makefile does not work properly with GNU Make $(MAKE_VERSION); \
    it needs GNU Make version 3.82 or later)
endif

# Before we go any further, test if certain programs are available.
# The following is based on the approach posted by Jonathan Ben-Avraham to
# Stack Overflow in 2014 at https://stackoverflow.com/a/25668869

programs_needed = gh git jq sed clasp
TEST := $(foreach p,$(programs_needed),\
	  $(if $(shell which $(p)),_,$(error Cannot find program "$(p)")))

# Set some basic variables.  These are quick to set; we set additional
# variables using "vars" but only when the others are needed.

name     := $(strip $(shell jq -r .name codemeta.json))
version  := $(strip $(shell jq -r .version codemeta.json))
url      := $(strip $(shell jq -r .url codemeta.json))
desc     := $(strip $(shell jq -r .description codemeta.json))
author   := $(strip $(shell jq -r '.author[] | .givenName + " " + .familyName' codemeta.json))
email    := $(strip $(shell jq -r '.author[].email' codemeta.json))
license  := $(strip $(shell jq -r .license codemeta.json))
branch   := $(shell git rev-parse --abbrev-ref HEAD)

# Color codes used in messages below.
green	  := $(shell tput setaf 2)
reset	  := $(shell tput sgr0)


# Print help if no command is given ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

help:
	@echo 'Available commands:'
	@echo ''
	@echo 'make'
	@echo 'make help'
	@echo '  Print this summary of available commands.'
	@echo ''
	@echo 'make report'
	@echo '  Print variables set in this Makefile from various sources.'
	@echo '  This is useful to verify the values that have been parsed.'
	@echo ''
	@echo 'make watch'
	@echo '  Use clasp push --watch to sync this directory w/ Google apps'
	@echo ''
	@echo 'make clean'
	@echo '  Clean up various files generated by this Makefile.'


# Gather additional values we sometimes need ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# These variables take longer to compute, and for some actions like "make help"
# they are unnecessary and annoying to wait for.

.SILENT: vars
vars:
	$(info Gathering data -- this takes a few moments ...)
	$(eval repo := $(strip $(shell gh repo view | head -1 | cut -f2 -d':')))
	$(info Gathering data -- this takes a few moments ... Done.)

# Note: the seemingly-misaligned equals signs in the code below are not really
# misaligned; it's adjusted for differences in tabs & spaces in the output.
report: vars
	@$(info $(green)name$(reset)    = $(name))
	$(info $(green)version$(reset) = $(version))
	$(info $(green)url$(reset)     = $(url))
	$(info $(green)desc$(reset)    = $(desc))
	$(info $(green)author$(reset)  = $(author))
	$(info $(green)email$(reset)   = $(email))
	$(info $(green)license$(reset) = $(license))
	$(info $(green)branch$(reset)  = $(branch))
	$(info $(green)repo$(reset)    = $(repo))


# make watch ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

watch:
	clasp push --watch


# Cleanup and miscellaneous directives ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

clean: clean-release clean-other
	@echo ✨ Cleaned! ✨

really-clean: clean

completely-clean: clean

clean-release: clean

clean-other:;
	rm -f *.bak
	rm -f tests/*.log

.PHONY: help vars report release test-branch test tests update-all \
	update-init update-meta update-citation update-example commit-updates \
	update-doi print-instructions clean really-clean completely-clean \
	clean-dist really-clean-dist clean-build really-clean-build \
	clean-release clean-other

.SILENT: clean clean-dist clean-build clean-release clean-other really-clean \
	really-clean-dist really-clean-build completely-clean
