# =============================================================================
# @file    Makefile
# @brief   Makefile for some steps in creating new releases on GitHub
# @date    2023-06-12
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/boffo
# =============================================================================

.ONESHELL:                              # Run all commands in the same shell.
.SHELLFLAGS += -e                       # Exit at the first error.

# This Makefile uses syntax that needs at least GNU Make version 3.82.
# The following test is based on the approach posted by Eldar Abusalimov to
# Stack Overflow in 2012 at https://stackoverflow.com/a/12231321/743730

ifeq ($(filter undefine,$(value .FEATURES)),)
$(error Unsupported version of Make. \
    This Makefile does not work properly with GNU Make $(MAKE_VERSION); \
    it needs GNU Make version 3.82 or later)
endif

# Before we go any further, test if certain programs are available.
# The following is based on the approach posted by Jonathan Ben-Avraham to
# Stack Overflow in 2014 at https://stackoverflow.com/a/25668869

programs_needed = gh git jq jshint sed clasp
TEST := $(foreach p,$(programs_needed),\
	  $(if $(shell which $(p)),_,$(error Cannot find program "$(p)")))

# Set some basic variables.  These are quick to set; we set additional
# variables using "vars" but only when the others are needed.

name     := $(strip $(shell jq -r .name codemeta.json))
version  := $(strip $(shell jq -r .version codemeta.json))
url      := $(strip $(shell jq -r .url codemeta.json))
desc     := $(strip $(shell jq -r .description codemeta.json))
author   := $(strip $(shell jq -r '.author[] | .givenName + " " + .familyName' codemeta.json))
email    := $(strip $(shell jq -r '.author[].email' codemeta.json))
license  := $(strip $(shell jq -r .license codemeta.json))
branch   := $(shell git rev-parse --abbrev-ref HEAD)

parent_id    := dhgzh-arp63
versions_url := https://data.caltech.edu/api/records/$(parent_id)/versions
latest_doi   := $(shell curl -s $(versions_url) | jq -r .hits.hits[0].pids.doi.identifier)
doi_tail     := $(shell cut -f'2' -d'/' <<< $(latest_doi))

# Color codes used in messages below.
green	  := $(shell tput setaf 2)
reset	  := $(shell tput sgr0)


# Print help if no command is given ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

help:
	@echo 'Available commands:'
	@echo ''
	@echo 'make'
	@echo 'make help'
	@echo '  Print this summary of available commands.'
	@echo ''
	@echo 'make report'
	@echo '  Print variables set in this Makefile from various sources.'
	@echo '  This is useful to verify the values that have been parsed.'
	@echo ''
	@echo 'make watch'
	@echo '  Use clasp push --watch to sync this directory w/ Google apps'
	@echo ''
	@echo 'make lint'
	@echo '  Run JavaScript linter.'
	@echo ''
	@echo 'make release'
	@echo '  Do a release on GitHub. This will push changes to GitHub,'
	@echo '  open an editor to let you edit release notes, and run'
	@echo '  "gh release create" followed by "gh release upload".'
	@echo '  This will also update the copy of the GAS files in the'
	@echo '  public Google Apps Script project maintained by Mike.'
	@echo ''
	@echo 'make update-doi'
	@echo '  Update the DOI in the CITATION.cff and README.md files.'
	@echo '  Only do this AFTER doing a "make release".'
	@echo ''
	@echo 'make clean'
	@echo '  Clean up various files generated by this Makefile.'


# Gather additional values we sometimes need ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# These variables take longer to compute, and for some actions like "make help"
# they are unnecessary and annoying to wait for.

.SILENT: vars
vars:
	$(info Gathering data -- this takes a few moments ...)
	$(eval repo := $(strip $(shell gh repo view | head -1 | cut -f2 -d':')))
	$(info Gathering data -- this takes a few moments ... Done.)

# Note: the seemingly-misaligned equals signs in the code below are not really
# misaligned; it's adjusted for differences in tabs & spaces in the output.
report: vars
	@$(info $(green)name$(reset)       = $(name))
	$(info $(green)version$(reset)	   = $(version))
	$(info $(green)url$(reset)	   = $(url))
	$(info $(green)desc$(reset)	   = $(desc))
	$(info $(green)author$(reset)	   = $(author))
	$(info $(green)email$(reset)	   = $(email))
	$(info $(green)license$(reset)	   = $(license))
	$(info $(green)branch$(reset)	   = $(branch))
	$(info $(green)repo$(reset)	   = $(repo))
	$(info $(green)latest_doi$(reset) = $(latest_doi))


# make watch ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

watch:
	clasp -P .clasp.json.caltech  push --watch


# make lint & make test ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

lint:
	jshint Code.js


# make release ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

release: | confirm-release release-on-github sync-projects print-instructions

confirm-release:
	@read -p "Have you updated the version number? [y/N] " ans && : $${ans:=N} ;\
	if [ $${ans::1} != y ]; then \
	  echo ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
	  echo ┃ Update the version number in codemeta.json first. ┃
	  echo ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
	  exit 1
	fi

update-all: update-meta update-citation

# Note that this doesn't replace "version" in codemeta.json, because that's the
# variable from which this makefile gets its version number in the first place.
update-meta:
	$(eval date := $(shell date "+%F"))
	@sed -i .bak -e '/"softwareVersion"/ s/: ".*"/: "$(version)"/' codemeta.json
	@sed -i .bak -e '/"datePublished"/ s/: ".*"/: "$(date)"/' codemeta.json

update-citation:
	$(eval date := $(shell date "+%F"))
	@sed -i .bak -e '/^date-released:/ s/".*"/"$(date)"/' CITATION.cff
	@sed -i .bak -e '/^version:/ s/".*"/"$(version)"/' CITATION.cff

edited := codemeta.json CITATION.cff

commit-updates:
	git add $(edited)
	git diff-index --quiet HEAD $(edited) || \
	    git commit -m"chore: update stored version number" $(edited)

release-on-github: | update-all commit-updates
	$(eval tmp_file := $(shell mktemp /tmp/release-notes-$(name).XXXX))
	$(eval tag := $(shell tr -d '()' <<< "$(version)" | tr ' ' '-'))
	git push -v --all
	git push -v --tags
	@$(info ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓)
	@$(info ┃ Write release notes in the file that gets opened in your  ┃)
	@$(info ┃ editor. Close the editor to complete the release process. ┃)
	@$(info ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛)
	sleep 2
	$(EDITOR) $(tmp_file)
	gh release create $(tag) -t "Release $(version)" -F $(tmp_file)

# The reason for two separate project profiles is that we have to keep two
# separate Apps Script projects on Google. The Caltech one is the real
# development copy, but it's private (because it's inside the Library's
# G-Suite/Google Workspace), so I keep a second copy in my own (mhucka)
# Google account so that I can point people to it.
sync-projects:
	clasp -P .clasp.json.caltech  push || exit 1
	clasp -P .clasp.json.public  push || exit 1

print-instructions: vars
	@$(info ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓)
	@$(info ┃ Next steps:                                                ┃)
	@$(info ┃ 1. Check https://github.com/$(repo)/releases )
	@$(info ┃ 2. Wait for https://github.com/$(repo)/actions to finish   ┃)
	@$(info ┃ 3. Run "make update-doi" and check the results             ┃)
	@$(info ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛)

update-doi: vars
	sed -i .bak -e '/doi:/ s|doi: .*|doi: $(latest_doi)|' CITATION.cff
	sed -i .bak -e 's|records/[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]-[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]|records/$(doi_tail)|g' README.md
	git add CITATION.cff README.md
	git diff-index --quiet HEAD CITATION.cff README.md || \
	  (git commit -m"chore: update DOI" CITATION.cff README.md && git push -v --all)


# Cleanup and miscellaneous directives ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

clean: clean-release clean-other
	@echo ✨ Cleaned! ✨

really-clean: clean

completely-clean: clean

clean-release: clean

clean-other:;
	rm -f *.bak
	rm -f tests/*.log

.PHONY: help vars report release test-branch test tests update-all \
	update-init update-meta update-citation update-example commit-updates \
	update-doi print-instructions clean really-clean completely-clean \
	clean-dist really-clean-dist clean-build really-clean-build \
	clean-release clean-other

.SILENT: clean clean-dist clean-build clean-release clean-other really-clean \
	really-clean-dist really-clean-build completely-clean
